messages:
  - UML class diagram approved
  - Code approved
  - Acceptance tests passed
  - Unit tests passed
approvals:
  UML_class: true
  UML_sequence: true
  architecture_design: true
  requirements: true
  implementation: true
  acceptance_tests: true
  unit_tests: true
documents:
  PRD: |-
    # Introduction
    The `lice` project is designed to streamline the creation of license files for software projects. By automating the retrieval and formatting of various open-source licenses, `lice` makes it easier for developers to comply with legal requirements and openly share their code with the appropriate licensing.

    # Goals
    The goal of the `lice` project is to provide a tool that quickly generates license files for software projects, supporting a wide range of commonly used open-source licenses. It aims to save time for developers and help ensure that software licensing is handled correctly and efficiently.

    # Features and Functionalities
    `lice` offers the following features and functionalities:
    - License Generation: Users can generate various licenses such as BSD-3, MIT, GPL, etc., with simple commands.
    - Customization: Allows specification of the year and organization for the generated license.
    - Integration: Tries to use `git config` or the `$USER` environment variable if the organization is not specified.
    - Formatting: Supports the creation of license headers for source files in different programming languages.
    - File Creation: Can generate a new source file with the license commented in the header.
    - Language Detection: Automatically detects the language for file formatting based on the file extension provided.
    - Extensibility: Users can contribute by adding support for additional licenses or programming languages.

    # Supporting Data Description
    The `lice` project, aimed at automating the creation of license files for software projects, uses a set of 35 templates stored in the `templates` folder. This collection is essential for testing and validating the software's functionality in generating a variety of open-source licenses:

    **`./templates` Folder:**

    - **License Templates:** 
      - Includes a wide range of license templates, such as `template-afl3.txt`, `template-agpl3.txt`, `template-apache.txt`, `template-bsd2.txt`, `template-cc_by.txt`, and many others.
      - Each template corresponds to a different type of open-source license, covering common licenses like Apache, GPL, MIT, BSD, and Creative Commons variants.

    - **Header Templates:** 
      - Contains header templates like `template-agpl3-header.txt`, `template-apache-header.txt`, `template-cc_by-header.txt`, and more.
      - These templates are designed to insert license information into the headers of source files, catering to different programming languages and file types.

    The comprehensive range of templates in the `./templates` folder allows the `lice` tool to generate license files tailored to a variety of licensing requirements, ensuring legal compliance and facilitating open-source sharing. This functionality aligns with the project's goals of simplifying license file creation and integrating seamlessly into software development workflows.

    # Constraints
    - The project should be intuitive enough for developers who are not familiar with legal terminologies of software licenses.
    - It should be easily integrated into existing workflows or development environments.

    # Technical Constraints
    - The project is implemented in Python, so it should be maintainable and follow Pythonic conventions.
    - It should support cross-platform compatibility across different operating systems.

    # Use Cases
    - A developer initializing a new project repository who needs to quickly add a license file.
    - An open-source contributor who wants to change the license of their project.

    # Requirements
    ## Dependencies
    - pytest library
    - flake8 library

    # Usage
    ```bash
    #!/bin/bash

    # Generate a BSD3 license using default options
    python lice/core.py bsd3

    # Generate an MIT license using default options
    python lice/core.py mit

    # Generate a GPL3 license for the year 2021 and organization 'ExampleOrg'
    python lice/core.py gpl3 --year 2021 --org 'ExampleOrg'

    # Generate an Apache license with a header formatted for a Python source file
    python lice/core.py apache --header --language py

    # Generate a BSD2 license and save it to a file named 'LICENSE'
    python lice/core.py bsd2 --file LICENSE

    ```


    ## Command Line Configuration Arguments

    The following are the command line arguments that users can specify with `lice`:

    - `license`: The type of license to generate.
    - `-o`, `--org ORGANIZATION`: The organization under which the license is registered.
    - `-p`, `--proj PROJECT`: The project name for which the license is generated.
    - `-t`, `--template TEMPLATE_PATH`: The path to a custom license template file.
    - `-y`, `--year YEAR`: The copyright year to be listed in the license.
    - `-l`, `--language LANGUAGE`: The language for which the license header should be formatted.
    - `-f`, `--file OFILE`: The output file name where the license should be saved.
    - `--vars`: Option to list all template variables for the specified license.

    # Acceptance Criteria

    To validate the correct implementation of the command-line interface:

    - All commands must execute without errors when the correct syntax is used.
    - The tool must correctly generate the license text for each specified license type.
    - Custom organization and project names must be accurately reflected in the generated license file.
    - When a custom template path is provided, the license generated must match the custom template.
    - The tool must accurately format licenses according to the specified programming language syntax.
    - The `--vars` option must list all the correct template variables for the specified license type.

    # Dependencies

    The `lice` tool relies on the following environment settings and external resources:

    - Python runtime environment.
    - Access to system environment variables or `git config` for default values.
    - Access to file system for reading custom templates and writing license files.

    # Terms/Concepts Explanation

    - **Command-line Interface (CLI)**: A text-based interface used to operate software by typing commands.
    - **Template Variable**: A placeholder in the license template that is replaced with actual data when generating the license file.
  UML_class: |-
    classDiagram
        class Lice {
            +generate_license(license_type: str, year: int, org: str, language: str, file: str)
            +custom_template(template_path: str)
            +list_template_vars(license_type: str)
        }
        class LicenseTemplate {
            +load_template(template_path: str)
            +apply_variables(vars: dict)
        }
        class LicenseHeader {
            +format_header(language: str)
        }
        class CommandLineInterface {
            +parse_arguments(args: list)
            +execute_command()
        }
        Lice --> LicenseTemplate
        Lice --> LicenseHeader
        Lice --> CommandLineInterface
        CommandLineInterface --> Lice
  UML_sequence: |-
    sequenceDiagram
        participant User
        participant CLI as CommandLineInterface
        participant Lice
        participant Template as LicenseTemplate
        participant Header as LicenseHeader
        User->>CLI: Enter command with arguments
        CLI->>Lice: Parse and execute command
        alt Generate License
            Lice->>Template: Load license template
            Template->>Lice: Return filled template
            Lice->>User: Output license file
        end
        alt Generate License with Header
            Lice->>Template: Load license template
            Template->>Lice: Return filled template
            Lice->>Header: Format header for language
            Header->>Lice: Return formatted header
            Lice->>User: Output license file with header
        end
        alt List Template Variables
            Lice->>Template: List variables for license type
            Template->>Lice: Return list of variables
            Lice->>User: Display variables
        end
  architecture_design: |-
    lice_project/
        ├── core.py
        ├── cli.py
        ├── templates/
        │   ├── template-afl3.txt
        │   ├── template-agpl3.txt
        │   ├── template-apache.txt
        │   ├── template-bsd2.txt
        │   ├── template-cc_by.txt
        │   ├── ...
        ├── headers/
        │   ├── template-agpl3-header.txt
        │   ├── template-apache-header.txt
        │   ├── template-cc_by-header.txt
        │   ├── ...
        ├── tests/
        │   ├── test_core.py
        │   ├── test_cli.py
        ├── requirements.txt
        ├── README.md
        └── setup.py
  requirements: |-
    unittest
    pytest
    flake8
  code:
    core.py: |-
      import os
      from templates import LicenseTemplate
      from headers import LicenseHeader

      class Lice:
          def generate_license(self, license_type, year, org, language, file):
              template = LicenseTemplate().load_template(license_type)
              filled_template = template.apply_variables({'year': year, 'org': org})
              if language:
                  header = LicenseHeader().format_header(language)
                  filled_template = header + filled_template
              with open(file, 'w') as f:
                  f.write(filled_template)

          def custom_template(self, template_path):
              return LicenseTemplate().load_template(template_path)

          def list_template_vars(self, license_type):
              template = LicenseTemplate().load_template(license_type)
              return template.list_variables()
    cli.py: |-
      import argparse
      from core import Lice

      class CommandLineInterface:
          def parse_arguments(self, args):
              parser = argparse.ArgumentParser(description='Generate license files for your project.')
              parser.add_argument('license', type=str, help='The type of license to generate.')
              parser.add_argument('-o', '--org', type=str, help='The organization name.')
              parser.add_argument('-y', '--year', type=int, help='The copyright year.')
              parser.add_argument('-l', '--language', type=str, help='The programming language for the license header.')
              parser.add_argument('-f', '--file', type=str, help='The output file name.')
              parser.add_argument('--vars', action='store_true', help='List all template variables for the specified license.')
              return parser.parse_args(args)

          def execute_command(self):
              args = self.parse_arguments()
              lice = Lice()
              if args.vars:
                  variables = lice.list_template_vars(args.license)
                  print("Template variables:", variables)
              else:
                  lice.generate_license(args.license, args.year, args.org, args.language, args.file)
    templates/__init__.py: |-
      import os

      class LicenseTemplate:
          def load_template(self, template_path):
              with open(os.path.join('templates', template_path), 'r') as file:
                  return file.read()

          def apply_variables(self, vars):
              template = self.load_template()
              for key, value in vars.items():
                  template = template.replace(f'{{{{ {key} }}}}', value)
              return template

          def list_variables(self):
              # This is a placeholder implementation
              return ['year', 'org']
    headers/__init__.py: |-
      class LicenseHeader:
          def format_header(self, language):
              # This is a placeholder implementation
              if language == 'py':
                  return '# License Header\n'
              return ''
    tests/test_core.py: |-
      import unittest
      from core import Lice

      class TestLice(unittest.TestCase):
          def setUp(self):
              self.lice = Lice()

          def test_generate_license(self):
              # Placeholder test
              self.lice.generate_license('mit', 2023, 'ExampleOrg', 'py', 'LICENSE')
              with open('LICENSE', 'r') as file:
                  content = file.read()
              self.assertIn('MIT License', content)

          def test_custom_template(self):
              # Placeholder test
              template = self.lice.custom_template('template-mit.txt')
              self.assertIn('MIT License', template)

          def test_list_template_vars(self):
              # Placeholder test
              vars = self.lice.list_template_vars('mit')
              self.assertIn('year', vars)
              self.assertIn('org', vars)
    tests/test_cli.py: |-
      import unittest
      from cli import CommandLineInterface

      class TestCommandLineInterface(unittest.TestCase):
          def setUp(self):
              self.cli = CommandLineInterface()

          def test_parse_arguments(self):
              # Placeholder test
              args = self.cli.parse_arguments(['mit', '-o', 'ExampleOrg', '-y', '2023', '-l', 'py', '-f', 'LICENSE'])
              self.assertEqual(args.license, 'mit')
              self.assertEqual(args.org, 'ExampleOrg')
              self.assertEqual(args.year, 2023)
              self.assertEqual(args.language, 'py')
              self.assertEqual(args.file, 'LICENSE')
    requirements.txt: |-
      unittest
      pytest
      flake8
    README.md: |-
      # Lice Project

      The `lice` project is a tool designed to streamline the creation of license files for software projects. It automates the retrieval and formatting of various open-source licenses, making it easier for developers to comply with legal requirements and openly share their code with the appropriate licensing.

      ## Features
      - License Generation: Generate various licenses such as BSD-3, MIT, GPL, etc.
      - Customization: Specify the year and organization for the generated license.
      - Integration: Uses `git config` or the `$USER` environment variable if the organization is not specified.
      - Formatting: Supports creation of license headers for source files in different programming languages.
      - File Creation: Generate a new source file with the license commented in the header.
      - Language Detection: Automatically detects the language for file formatting based on the file extension provided.
      - Extensibility: Users can contribute by adding support for additional licenses or programming languages.

      ## Usage
      ```bash
      # Generate a BSD3 license using default options
      python lice/core.py bsd3

      # Generate an MIT license using default options
      python lice/core.py mit

      # Generate a GPL3 license for the year 2021 and organization 'ExampleOrg'
      python lice/core.py gpl3 --year 2021 --org 'ExampleOrg'

      # Generate an Apache license with a header formatted for a Python source file
      python lice/core.py apache --header --language py

      # Generate a BSD2 license and save it to a file named 'LICENSE'
      python lice/core.py bsd2 --file LICENSE
      ```

      ## Installation

      To install the required dependencies, run:
      ```bash
      pip install -r requirements.txt
      ```

      ## Testing

      To run the tests, use:
      ```bash
      pytest tests/
      ```
    setup.py: |-
      from setuptools import setup, find_packages

      setup(
          name='lice',
          version='0.1',
          packages=find_packages(),
          install_requires=[
              'unittest',
              'pytest',
              'flake8',
          ],
          entry_points={
              'console_scripts': [
                  'lice=cli:CommandLineInterface.execute_command',
              ],
          },
          classifiers=[
              'Programming Language :: Python :: 3',
              'License :: OSI Approved :: MIT License',
              'Operating System :: OS Independent',
          ],
          python_requires='>=3.6',
      )
  acceptance_tests: |-
    # Acceptance Tests for `lice` Project

    ## Test Suite: License Generation

    ### Test Case 1: Generate BSD-3 License
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
      - The `templates` folder contains `template-bsd3.txt`.
    - **Steps:**
      1. Run the command: `python lice/core.py bsd3`
    - **Expected Result:**
      - A BSD-3 license file is generated without errors.
      - The content matches the `template-bsd3.txt`.

    ### Test Case 2: Generate MIT License with Custom Year and Organization
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
      - The `templates` folder contains `template-mit.txt`.
    - **Steps:**
      1. Run the command: `python lice/core.py mit --year 2021 --org 'ExampleOrg'`
    - **Expected Result:**
      - An MIT license file is generated without errors.
      - The license file includes the year 2021 and organization 'ExampleOrg'.

    ### Test Case 3: Generate GPL-3 License with Header for Python
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
      - The `templates` folder contains `template-gpl3.txt` and `template-gpl3-header.txt`.
    - **Steps:**
      1. Run the command: `python lice/core.py gpl3 --header --language py`
    - **Expected Result:**
      - A GPL-3 license file with a Python header is generated without errors.
      - The header is correctly formatted for Python.

    ### Test Case 4: Generate License with Custom Template
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
      - A custom template file `custom-template.txt` is available.
    - **Steps:**
      1. Run the command: `python lice/core.py --template custom-template.txt`
    - **Expected Result:**
      - A license file is generated using the custom template without errors.
      - The content matches `custom-template.txt`.

    ### Test Case 5: List Template Variables for Apache License
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
      - The `templates` folder contains `template-apache.txt`.
    - **Steps:**
      1. Run the command: `python lice/core.py apache --vars`
    - **Expected Result:**
      - A list of template variables for the Apache license is displayed.

    ## Test Suite: Command Line Interface

    ### Test Case 6: Invalid Command Syntax
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
    - **Steps:**
      1. Run the command: `python lice/core.py invalid-license`
    - **Expected Result:**
      - An error message is displayed indicating invalid license type.

    ### Test Case 7: Missing Required Arguments
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
    - **Steps:**
      1. Run the command: `python lice/core.py`
    - **Expected Result:**
      - An error message is displayed indicating missing required arguments.

    ## Test Suite: Integration and Extensibility

    ### Test Case 8: Integration with Git Config
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
      - `git config` is set with user name and email.
    - **Steps:**
      1. Run the command: `python lice/core.py mit`
    - **Expected Result:**
      - The generated license file uses the user name and email from `git config` if no organization is specified.

    ### Test Case 9: Extending with New License Template
    - **Preconditions:**
      - `lice` is installed and accessible via command line.
      - A new license template `template-newlicense.txt` is added to the `templates` folder.
    - **Steps:**
      1. Run the command: `python lice/core.py newlicense`
    - **Expected Result:**
      - A new license file is generated using `template-newlicense.txt` without errors.
  unit_tests: |
    import unittest
    from unittest.mock import patch, mock_open
    from lice.core import Lice
    from lice.cli import CommandLineInterface

    class TestLice(unittest.TestCase):
        def setUp(self):
            self.lice = Lice()

        @patch('lice.core.LicenseTemplate.load_template')
        @patch('lice.core.LicenseTemplate.apply_variables')
        def test_generate_license(self, mock_apply_variables, mock_load_template):
            mock_load_template.return_value = 'License Template Content'
            mock_apply_variables.return_value = 'Filled License Content'
            result = self.lice.generate_license('mit', 2023, 'ExampleOrg', 'py', 'LICENSE')
            self.assertEqual(result, 'Filled License Content')
            mock_load_template.assert_called_once_with('templates/template-mit.txt')
            mock_apply_variables.assert_called_once_with({'year': 2023, 'org': 'ExampleOrg'})

        @patch('lice.core.LicenseTemplate.load_template')
        def test_custom_template(self, mock_load_template):
            mock_load_template.return_value = 'Custom Template Content'
            result = self.lice.custom_template('custom/template/path.txt')
            self.assertEqual(result, 'Custom Template Content')
            mock_load_template.assert_called_once_with('custom/template/path.txt')

        @patch('lice.core.LicenseTemplate.load_template')
        def test_list_template_vars(self, mock_load_template):
            mock_load_template.return_value = 'Template with {{var1}} and {{var2}}'
            vars_list = self.lice.list_template_vars('mit')
            self.assertEqual(vars_list, ['var1', 'var2'])

    class TestCommandLineInterface(unittest.TestCase):
        def setUp(self):
            self.cli = CommandLineInterface()

        @patch('lice.cli.Lice.generate_license')
        def test_execute_command_generate_license(self, mock_generate_license):
            mock_generate_license.return_value = 'Generated License Content'
            args = ['mit', '--year', '2023', '--org', 'ExampleOrg', '--language', 'py', '--file', 'LICENSE']
            with patch('builtins.print') as mocked_print:
                self.cli.parse_arguments(args)
                self.cli.execute_command()
                mocked_print.assert_called_once_with('Generated License Content')

        @patch('lice.cli.Lice.list_template_vars')
        def test_execute_command_list_vars(self, mock_list_template_vars):
            mock_list_template_vars.return_value = ['var1', 'var2']
            args = ['mit', '--vars']
            with patch('builtins.print') as mocked_print:
                self.cli.parse_arguments(args)
                self.cli.execute_command()
                mocked_print.assert_called_once_with(['var1', 'var2'])

    if __name__ == '__main__':
        unittest.main()