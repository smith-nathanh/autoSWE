{
    "environment_setup": {
        "create_conda_env": {
            "stdout": "Collecting package metadata (repodata.json): ...working... done\nSolving environment: ...working... done\n\n## Package Plan ##\n\n  environment location: C:\\Users\\smith\\Anaconda3\\envs\\myenv\n\n  added / updated specs:\n    - python=3.8\n\n\nThe following NEW packages will be INSTALLED:\n\n  ca-certificates    pkgs/main/win-64::ca-certificates-2024.11.26-haa95532_0\n  libffi             pkgs/main/win-64::libffi-3.4.4-hd77b12b_1\n  openssl            pkgs/main/win-64::openssl-3.0.15-h827c3e9_0\n  pip                pkgs/main/win-64::pip-24.2-py38haa95532_0\n  python             pkgs/main/win-64::python-3.8.20-h8205438_0\n  setuptools         pkgs/main/win-64::setuptools-75.1.0-py38haa95532_0\n  sqlite             pkgs/main/win-64::sqlite-3.45.3-h2bbff1b_0\n  vc                 pkgs/main/win-64::vc-14.40-h2eaa2aa_1\n  vs2015_runtime     pkgs/main/win-64::vs2015_runtime-14.40.33807-h98bb1dd_1\n  wheel              pkgs/main/win-64::wheel-0.44.0-py38haa95532_0\n\n\nPreparing transaction: ...working... done\nVerifying transaction: ...working... done\nExecuting transaction: ...working... done\n#\n# To activate this environment, use\n#\n#     $ conda activate myenv\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n\n",
            "stderr": "\n\n==> WARNING: A newer version of conda exists. <==\n  current version: 4.8.2\n  latest version: 24.11.0\n\nPlease update conda by running\n\n    $ conda update -n base -c defaults conda\n\n\n",
            "returncode": 0
        },
        "activate_conda_env": {
            "stdout": "",
            "stderr": "",
            "returncode": 0
        },
        "pip_install": {
            "stdout": "No additional packages to install",
            "stderr": "",
            "returncode": 0
        },
        "example_usage.sh": [
            {
                "command": "python query_arxiv.py --category cs.CL --author Smith --title neural --abstract learning --recent_days 7 --to_file results.csv --verbose",
                "result": {
                    "stdout": "",
                    "stderr": "",
                    "returncode": 0
                }
            }
        ]
    },
    "acceptance_tests": {
        "stdout": "",
        "stderr": "ERROR conda.cli.main_run:execute(32): Subprocess for 'conda run ['python', '-m', 'unittest', 'tests/acceptance/test_features.py']' command failed.  (See above for error)\nF.usage: python.exe -m unittest [-h] [--category CATEGORY] [--title TITLE]\n\n                              [--author AUTHOR] [--abstract ABSTRACT]\n\n                              --recent_days RECENT_DAYS [--to_file TO_FILE]\n\n                              [--verbose]\n\npython.exe -m unittest: error: the following arguments are required: --recent_days\n\nE\n\n======================================================================\n\nERROR: test_successful_query_execution (tests.acceptance.test_features.TestQueryArXivFeatures)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"C:\\Users\\smith\\Anaconda3\\envs\\myenv\\lib\\unittest\\mock.py\", line 1325, in patched\n\n    return func(*newargs, **newkeywargs)\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\tests\\acceptance\\test_features.py\", line 36, in test_successful_query_execution\n\n    self.query_arxiv.execute_query()\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\src\\query_arxiv.py\", line 20, in execute_query\n\n    self._parse_arguments()\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\src\\query_arxiv.py\", line 42, in _parse_arguments\n\n    args = parser.parse_args()\n\n  File \"C:\\Users\\smith\\Anaconda3\\envs\\myenv\\lib\\argparse.py\", line 1768, in parse_args\n\n    args, argv = self.parse_known_args(args, namespace)\n\n  File \"C:\\Users\\smith\\Anaconda3\\envs\\myenv\\lib\\argparse.py\", line 1800, in parse_known_args\n\n    namespace, args = self._parse_known_args(args, namespace)\n\n  File \"C:\\Users\\smith\\Anaconda3\\envs\\myenv\\lib\\argparse.py\", line 2034, in _parse_known_args\n\n    self.error(_('the following arguments are required: %s') %\n\n  File \"C:\\Users\\smith\\Anaconda3\\envs\\myenv\\lib\\argparse.py\", line 2521, in error\n\n    self.exit(2, _('%(prog)s: error: %(message)s\\n') % args)\n\n  File \"C:\\Users\\smith\\Anaconda3\\envs\\myenv\\lib\\argparse.py\", line 2508, in exit\n\n    _sys.exit(status)\n\nSystemExit: 2\n\n\n\n======================================================================\n\nFAIL: test_argument_validation (tests.acceptance.test_features.TestQueryArXivFeatures)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\tests\\acceptance\\test_features.py\", line 49, in test_argument_validation\n\n    self.query_arxiv._validate_arguments()\n\nAssertionError: ValueError not raised\n\n\n\n----------------------------------------------------------------------\n\nRan 3 tests in 0.008s\n\n\n\nFAILED (failures=1, errors=1)\n\n\n",
        "returncode": 0
    },
    "unit_tests": {
        "run_tests": {
            "stdout": "",
            "stderr": "ERROR conda.cli.main_run:execute(32): Subprocess for 'conda run ['coverage', 'run', '-m', 'unittest', 'tests/unit/test_module.py']' command failed.  (See above for error)\nFF.E...\n\n======================================================================\n\nERROR: test_argument_validation (tests.unit.test_module.TestQueryArXiv)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\tests\\unit\\test_module.py\", line 44, in test_argument_validation\n\n    self.query_arxiv._parse_arguments()\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\src\\query_arxiv.py\", line 55, in _parse_arguments\n\n    self._validate_arguments()\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\src\\query_arxiv.py\", line 61, in _validate_arguments\n\n    raise ValueError('Arguments must be constructed with only characters from \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+:.\"')\n\nValueError: Arguments must be constructed with only characters from \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+:.\"\n\n\n\n======================================================================\n\nFAIL: test_fetch_data (tests.unit.test_module.TestArXivAPI)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"c:\\users\\smith\\anaconda3\\lib\\unittest\\mock.py\", line 1191, in patched\n\n    return func(*args, **keywargs)\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\tests\\unit\\test_module.py\", line 123, in test_fetch_data\n\n    self.assertEqual(data, '<xml>data</xml>')\n\nAssertionError: <MagicMock name='urlopen().__enter__().read().decode()' id='2498509683456'> != '<xml>data</xml>'\n\n\n\n======================================================================\n\nFAIL: test_export_to_csv (tests.unit.test_module.TestCSVExporter)\n\n----------------------------------------------------------------------\n\nTraceback (most recent call last):\n\n  File \"c:\\users\\smith\\anaconda3\\lib\\unittest\\mock.py\", line 1191, in patched\n\n    return func(*args, **keywargs)\n\n  File \"C:\\Users\\smith\\code\\autoSWE\\system\\outputs\\v3\\ArXiv_digest\\tests\\unit\\test_module.py\", line 111, in test_export_to_csv\n\n    handle.write.assert_any_call('category,title,author,abstract,published,link\\n')\n\n  File \"c:\\users\\smith\\anaconda3\\lib\\unittest\\mock.py\", line 882, in assert_any_call\n\n    ) from cause\n\nAssertionError: write('category,title,author,abstract,published,link\\n') call not found\n\n\n\n----------------------------------------------------------------------\n\nRan 7 tests in 0.020s\n\n\n\nFAILED (failures=2, errors=1)\n\n\n",
            "returncode": 0
        },
        "coverage_report": {
            "stdout": "Name                        Stmts   Miss  Cover\n\n-----------------------------------------------\n\nsrc\\api\\arxiv_api.py            5      0   100%\n\nsrc\\query_arxiv.py             81     21    74%\n\nsrc\\utils\\csv_exporter.py       8      0   100%\n\nsrc\\utils\\xml_parser.py        11      0   100%\n\n-----------------------------------------------\n\nTOTAL                         105     21    80%\n\n\n",
            "stderr": "",
            "returncode": 0
        }
    }
}