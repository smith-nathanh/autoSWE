{
    "environment_setup": {
        "create_conda_env": {
            "stdout": "Collecting package metadata (repodata.json): ...working... done\nSolving environment: ...working... done\n\n## Package Plan ##\n\n  environment location: C:\\Users\\smith\\Anaconda3\\envs\\myenv\n\n  added / updated specs:\n    - python=3.8\n\n\nThe following NEW packages will be INSTALLED:\n\n  ca-certificates    pkgs/main/win-64::ca-certificates-2024.11.26-haa95532_0\n  libffi             pkgs/main/win-64::libffi-3.4.4-hd77b12b_1\n  openssl            pkgs/main/win-64::openssl-3.0.15-h827c3e9_0\n  pip                pkgs/main/win-64::pip-24.2-py38haa95532_0\n  python             pkgs/main/win-64::python-3.8.20-h8205438_0\n  setuptools         pkgs/main/win-64::setuptools-75.1.0-py38haa95532_0\n  sqlite             pkgs/main/win-64::sqlite-3.45.3-h2bbff1b_0\n  vc                 pkgs/main/win-64::vc-14.40-h2eaa2aa_1\n  vs2015_runtime     pkgs/main/win-64::vs2015_runtime-14.40.33807-h98bb1dd_1\n  wheel              pkgs/main/win-64::wheel-0.44.0-py38haa95532_0\n\n\nPreparing transaction: ...working... done\nVerifying transaction: ...working... done\nExecuting transaction: ...working... done\n#\n# To activate this environment, use\n#\n#     $ conda activate myenv\n#\n# To deactivate an active environment, use\n#\n#     $ conda deactivate\n\n",
            "stderr": "\n\n==> WARNING: A newer version of conda exists. <==\n  current version: 4.8.2\n  latest version: 24.11.0\n\nPlease update conda by running\n\n    $ conda update -n base -c defaults conda\n\n\n",
            "returncode": 0
        },
        "activate_conda_env": {
            "stdout": "",
            "stderr": "",
            "returncode": 0
        },
        "pip_install": {
            "stdout": "No additional packages to install",
            "stderr": "",
            "returncode": 0
        },
        "example_usage.sh": [
            {
                "command": "python demo.py",
                "result": {
                    "stdout": "",
                    "stderr": "ERROR conda.cli.main_run:execute(32): Subprocess for 'conda run ['python', 'demo.py']' command failed.  (See above for error)\npython: can't open file 'demo.py': [Errno 2] No such file or directory\n\n",
                    "returncode": 0
                }
            }
        ]
    },
    "acceptance_tests": {
        "stdout": "Iteration 0: Best Value = 0.5411967859524601\n\nIteration 1: Best Value = 0.028882661045938084\n\nIteration 2: Best Value = 0.012998668098690764\n\nIteration 3: Best Value = 0.007825864673014615\n\nIteration 4: Best Value = 0.002326360852937175\n\nIteration 5: Best Value = 0.00013370506809107344\n\nIteration 6: Best Value = 2.923485166650833e-06\n\nIteration 7: Best Value = 9.947635147981689e-07\n\nIteration 8: Best Value = 9.292975200662309e-07\n\nIteration 9: Best Value = 9.247220169206082e-07\n\nIteration 10: Best Value = 5.967226332751206e-08\n\nIteration 11: Best Value = 5.967226332751206e-08\n\nIteration 12: Best Value = 5.967226332751206e-08\n\nIteration 13: Best Value = 1.261883374704274e-08\n\nIteration 14: Best Value = 1.3222048163038007e-10\n\nIteration 15: Best Value = 1.3222048163038007e-10\n\nIteration 16: Best Value = 4.9899313629789935e-11\n\nIteration 17: Best Value = 1.0891494039928159e-11\n\nIteration 18: Best Value = 1.1152129338896035e-12\n\nIteration 19: Best Value = 6.582157355720427e-14\n\nIteration 20: Best Value = 4.00589509211304e-14\n\nIteration 21: Best Value = 7.679060214225769e-15\n\nIteration 22: Best Value = 7.679060214225769e-15\n\nIteration 23: Best Value = 6.712957248035679e-16\n\nIteration 24: Best Value = 1.746807926228113e-17\n\nIteration 25: Best Value = 1.1788838852994358e-17\n\nIteration 26: Best Value = 1.2244920566429027e-19\n\nIteration 27: Best Value = 1.2244920566429027e-19\n\nIteration 28: Best Value = 1.048752512355363e-20\n\nIteration 29: Best Value = 2.553470075153682e-21\n\nIteration 30: Best Value = 5.479494675580802e-22\n\nIteration 31: Best Value = 2.931664261380386e-22\n\nIteration 32: Best Value = 3.001937830692508e-24\n\nIteration 33: Best Value = 3.001937830692508e-24\n\nIteration 34: Best Value = 1.0864266753941033e-25\n\nIteration 35: Best Value = 3.9960427376430653e-26\n\nIteration 36: Best Value = 1.5523194322897972e-26\n\nIteration 37: Best Value = 3.80617550459301e-27\n\nIteration 38: Best Value = 5.793735409037135e-28\n\nIteration 39: Best Value = 1.8002559008080288e-28\n\nIteration 40: Best Value = 5.565446305161989e-29\n\nIteration 41: Best Value = 7.403481192276453e-30\n\nIteration 42: Best Value = 7.403481192276453e-30\n\nIteration 43: Best Value = 1.172629084349076e-30\n\nIteration 44: Best Value = 3.207582571644295e-32\n\nIteration 45: Best Value = 3.207582571644295e-32\n\nIteration 46: Best Value = 3.207582571644295e-32\n\nIteration 47: Best Value = 3.207582571644295e-32\n\nIteration 48: Best Value = 3.207582571644295e-32\n\nIteration 49: Best Value = 3.207582571644295e-32\n\nIteration 50: Best Value = 2.3904453094331845e-32\n\nIteration 51: Best Value = 2.3847370106269673e-32\n\nIteration 52: Best Value = 2.3847370106269673e-32\n\nIteration 53: Best Value = 2.3519515804433877e-32\n\nIteration 54: Best Value = 2.3519515804433877e-32\n\nIteration 55: Best Value = 2.3519515804433877e-32\n\nIteration 56: Best Value = 2.3519515804433877e-32\n\nIteration 57: Best Value = 2.3519515804433877e-32\n\nIteration 58: Best Value = 2.351946730899906e-32\n\nIteration 59: Best Value = 2.3519039140384723e-32\n\nIteration 60: Best Value = 2.3519039140384723e-32\n\nIteration 61: Best Value = 2.3518360227351637e-32\n\nIteration 62: Best Value = 2.351817627332359e-32\n\nIteration 63: Best Value = 2.351817627332359e-32\n\nIteration 64: Best Value = 2.3518076431172408e-32\n\nIteration 65: Best Value = 2.3518050250420886e-32\n\nIteration 66: Best Value = 2.351801729271791e-32\n\nIteration 67: Best Value = 2.3518002027549562e-32\n\nIteration 68: Best Value = 2.3518001938489414e-32\n\nIteration 69: Best Value = 2.3518001875951205e-32\n\nIteration 70: Best Value = 2.351800084146773e-32\n\nIteration 71: Best Value = 2.3517999627838543e-32\n\nIteration 72: Best Value = 2.3517999166841487e-32\n\nIteration 73: Best Value = 2.351799877873228e-32\n\nIteration 74: Best Value = 2.351799877873228e-32\n\nIteration 75: Best Value = 2.351799871031998e-32\n\nIteration 76: Best Value = 2.351799871031998e-32\n\nIteration 77: Best Value = 2.351799871031998e-32\n\nIteration 78: Best Value = 2.351799871031998e-32\n\nIteration 79: Best Value = 2.351799871031998e-32\n\nIteration 80: Best Value = 2.3517998707395597e-32\n\nIteration 81: Best Value = 2.3517998676798984e-32\n\nIteration 82: Best Value = 2.3517998676798984e-32\n\nIteration 83: Best Value = 2.3517998676727942e-32\n\nIteration 84: Best Value = 2.35179986748055e-32\n\nIteration 85: Best Value = 2.35179986748055e-32\n\nIteration 86: Best Value = 2.351799867435849e-32\n\nIteration 87: Best Value = 2.351799867416747e-32\n\nIteration 88: Best Value = 2.3517998674143028e-32\n\nIteration 89: Best Value = 2.3517998674043468e-32\n\nIteration 90: Best Value = 2.3517998673779364e-32\n\nIteration 91: Best Value = 2.3517998673549713e-32\n\nIteration 92: Best Value = 2.351799867348643e-32\n\nIteration 93: Best Value = 2.3517998673428106e-32\n\nIteration 94: Best Value = 2.3517998673428106e-32\n\nIteration 95: Best Value = 2.351799867342717e-32\n\nIteration 96: Best Value = 2.351799867342717e-32\n\nIteration 97: Best Value = 2.3517998673426182e-32\n\nIteration 98: Best Value = 2.3517998673425783e-32\n\nIteration 99: Best Value = 2.3517998673425783e-32\n\nOptimization completed. Best Value = 2.3517998673425783e-32\n\n\n",
        "stderr": "..\n\n----------------------------------------------------------------------\n\nRan 2 tests in 0.022s\n\n\n\nOK\n\n\n",
        "returncode": 0
    },
    "unit_tests": {
        "run_tests": {
            "stdout": "Iteration 0: Best Value = 19.010718506286537\n\nIteration 1: Best Value = 11.57458021473201\n\nIteration 2: Best Value = 10.647205692639165\n\nIteration 3: Best Value = 10.040767172945491\n\nIteration 4: Best Value = 10.040767172945491\n\nIteration 5: Best Value = 10.001933567380618\n\nIteration 6: Best Value = 10.001659386751685\n\nIteration 7: Best Value = 10.001443812231104\n\nIteration 8: Best Value = 10.001443812231104\n\nIteration 9: Best Value = 10.001381992514176\n\nIteration 10: Best Value = 10.001243027767522\n\nIteration 11: Best Value = 10.001217605382674\n\nIteration 12: Best Value = 10.001217605382674\n\nIteration 13: Best Value = 10.001217605382674\n\nIteration 14: Best Value = 10.001217278145207\n\nIteration 15: Best Value = 10.001217036024656\n\nIteration 16: Best Value = 10.001217026276645\n\nIteration 17: Best Value = 10.001217006796349\n\nIteration 18: Best Value = 10.001216890918096\n\nIteration 19: Best Value = 10.001216890601924\n\nIteration 20: Best Value = 10.001216888281812\n\nIteration 21: Best Value = 10.001216887402054\n\nIteration 22: Best Value = 10.001216887402054\n\nIteration 23: Best Value = 10.001216887402054\n\nIteration 24: Best Value = 10.001216887402054\n\nIteration 25: Best Value = 10.001216887402054\n\nIteration 26: Best Value = 10.00121688739775\n\nIteration 27: Best Value = 10.00121688739775\n\nIteration 28: Best Value = 10.001216887393433\n\nIteration 29: Best Value = 10.001216887393433\n\nIteration 30: Best Value = 10.001216887393433\n\nIteration 31: Best Value = 10.001216887393396\n\nIteration 32: Best Value = 10.001216887393394\n\nIteration 33: Best Value = 10.001216887393394\n\nIteration 34: Best Value = 10.001216887393394\n\nIteration 35: Best Value = 10.001216887393394\n\nIteration 36: Best Value = 10.001216887393392\n\nIteration 37: Best Value = 10.001216887393388\n\nIteration 38: Best Value = 10.001216887393387\n\nIteration 39: Best Value = 10.001216887393387\n\nIteration 40: Best Value = 10.001216887393387\n\nIteration 41: Best Value = 10.001216887393387\n\nIteration 42: Best Value = 10.001216887393387\n\nIteration 43: Best Value = 10.001216887393387\n\nIteration 44: Best Value = 10.001216887393387\n\nIteration 45: Best Value = 10.001216887393387\n\nIteration 46: Best Value = 10.001216887393385\n\nIteration 47: Best Value = 10.001216887393385\n\nIteration 48: Best Value = 10.001216887393385\n\nIteration 49: Best Value = 10.001216887393385\n\nIteration 50: Best Value = 10.001216887393385\n\nIteration 51: Best Value = 10.001216887393385\n\nIteration 52: Best Value = 10.001216887393385\n\nIteration 53: Best Value = 10.001216887393385\n\nIteration 54: Best Value = 10.001216887393385\n\nIteration 55: Best Value = 10.001216887393385\n\nIteration 56: Best Value = 10.001216887393385\n\nIteration 57: Best Value = 10.001216887393385\n\nIteration 58: Best Value = 10.001216887393385\n\nIteration 59: Best Value = 10.001216887393385\n\nIteration 60: Best Value = 10.001216887393385\n\nIteration 61: Best Value = 10.001216887393385\n\nIteration 62: Best Value = 10.001216887393385\n\nIteration 63: Best Value = 10.001216887393385\n\nIteration 64: Best Value = 10.001216887393385\n\nIteration 65: Best Value = 10.001216887393385\n\nIteration 66: Best Value = 10.001216887393385\n\nIteration 67: Best Value = 10.001216887393385\n\nIteration 68: Best Value = 10.001216887393385\n\nIteration 69: Best Value = 10.001216887393385\n\nIteration 70: Best Value = 10.001216887393385\n\nIteration 71: Best Value = 10.001216887393385\n\nIteration 72: Best Value = 10.001216887393385\n\nIteration 73: Best Value = 10.001216887393385\n\nIteration 74: Best Value = 10.001216887393385\n\nIteration 75: Best Value = 10.001216887393385\n\nIteration 76: Best Value = 10.001216887393385\n\nIteration 77: Best Value = 10.001216887393385\n\nIteration 78: Best Value = 10.001216887393385\n\nIteration 79: Best Value = 10.001216887393385\n\nIteration 80: Best Value = 10.001216887393385\n\nIteration 81: Best Value = 10.001216887393385\n\nIteration 82: Best Value = 10.001216887393385\n\nIteration 83: Best Value = 10.001216887393385\n\nIteration 84: Best Value = 10.001216887393385\n\nIteration 85: Best Value = 10.001216887393385\n\nIteration 86: Best Value = 10.001216887393385\n\nIteration 87: Best Value = 10.001216887393385\n\nIteration 88: Best Value = 10.001216887393385\n\nIteration 89: Best Value = 10.001216887393385\n\nIteration 90: Best Value = 10.001216887393385\n\nIteration 91: Best Value = 10.001216887393385\n\nIteration 92: Best Value = 10.001216887393385\n\nIteration 93: Best Value = 10.001216887393385\n\nIteration 94: Best Value = 10.001216887393385\n\nIteration 95: Best Value = 10.001216887393385\n\nIteration 96: Best Value = 10.001216887393385\n\nIteration 97: Best Value = 10.001216887393385\n\nIteration 98: Best Value = 10.001216887393385\n\nIteration 99: Best Value = 10.001216887393385\n\nOptimization completed. Best Value = 10.001216887393385\n\nIteration 0: Best Value = 1.6657309452890916\n\nIteration 1: Best Value = 0.21964009680759114\n\nIteration 2: Best Value = 0.10005690551786237\n\nIteration 3: Best Value = 0.04120824814036611\n\nIteration 4: Best Value = 0.000267381976529786\n\nIteration 5: Best Value = 0.000267381976529786\n\nIteration 6: Best Value = 9.860924093778111e-05\n\nIteration 7: Best Value = 4.129960752254204e-06\n\nIteration 8: Best Value = 4.129960752254204e-06\n\nIteration 9: Best Value = 5.153417818703139e-07\n\nIteration 10: Best Value = 5.153417818703139e-07\n\nIteration 11: Best Value = 5.153417818703139e-07\n\nIteration 12: Best Value = 5.153417818703139e-07\n\nIteration 13: Best Value = 1.3208397836046875e-07\n\nIteration 14: Best Value = 3.801204923649813e-09\n\nIteration 15: Best Value = 3.5053955471574324e-09\n\nIteration 16: Best Value = 3.3795143700310394e-09\n\nIteration 17: Best Value = 3.3795143700310394e-09\n\nIteration 18: Best Value = 3.3795143700310394e-09\n\nIteration 19: Best Value = 3.3777076345700628e-09\n\nIteration 20: Best Value = 3.3777076345700628e-09\n\nIteration 21: Best Value = 3.3777076345700628e-09\n\nIteration 22: Best Value = 3.287065889464485e-09\n\nIteration 23: Best Value = 3.287065889464485e-09\n\nIteration 24: Best Value = 3.287065889464485e-09\n\nIteration 25: Best Value = 3.2870657395295186e-09\n\nIteration 26: Best Value = 3.2870281679504726e-09\n\nIteration 27: Best Value = 3.286932805316926e-09\n\nIteration 28: Best Value = 3.286932805316926e-09\n\nIteration 29: Best Value = 3.286932805316926e-09\n\nIteration 30: Best Value = 3.286932805316926e-09\n\nIteration 31: Best Value = 3.286932805316926e-09\n\nIteration 32: Best Value = 3.286932805316926e-09\n\nIteration 33: Best Value = 3.2869242357860925e-09\n\nIteration 34: Best Value = 3.2869230581137995e-09\n\nIteration 35: Best Value = 3.2869226793057705e-09\n\nIteration 36: Best Value = 3.2869226793057705e-09\n\nIteration 37: Best Value = 3.2869226781956176e-09\n\nIteration 38: Best Value = 3.2869226781956176e-09\n\nIteration 39: Best Value = 3.2869226781956176e-09\n\nIteration 40: Best Value = 3.2869226745775155e-09\n\nIteration 41: Best Value = 3.2869226696738333e-09\n\nIteration 42: Best Value = 3.2869226696738333e-09\n\nIteration 43: Best Value = 3.2869226696239874e-09\n\nIteration 44: Best Value = 3.286922668880904e-09\n\nIteration 45: Best Value = 3.286922668841523e-09\n\nIteration 46: Best Value = 3.286922668545368e-09\n\nIteration 47: Best Value = 3.2869226684281597e-09\n\nIteration 48: Best Value = 3.286922668365439e-09\n\nIteration 49: Best Value = 3.2869226683349865e-09\n\nIteration 50: Best Value = 3.2869226683349865e-09\n\nIteration 51: Best Value = 3.286922668331161e-09\n\nIteration 52: Best Value = 3.2869226683291284e-09\n\nIteration 53: Best Value = 3.2869226683291284e-09\n\nIteration 54: Best Value = 3.2869226683285403e-09\n\nIteration 55: Best Value = 3.2869226683278087e-09\n\nIteration 56: Best Value = 3.2869226683278087e-09\n\nIteration 57: Best Value = 3.2869226683268317e-09\n\nIteration 58: Best Value = 3.2869226683268317e-09\n\nIteration 59: Best Value = 3.2869226683268317e-09\n\nIteration 60: Best Value = 3.2869226683268317e-09\n\nIteration 61: Best Value = 3.2869226683268317e-09\n\nIteration 62: Best Value = 3.2869226683268317e-09\n\nIteration 63: Best Value = 3.2869226683268317e-09\n\nIteration 64: Best Value = 3.2869226683268317e-09\n\nIteration 65: Best Value = 3.2869226683268317e-09\n\nIteration 66: Best Value = 3.2869226683268317e-09\n\nIteration 67: Best Value = 3.2869226683268313e-09\n\nIteration 68: Best Value = 3.286922668326831e-09\n\nIteration 69: Best Value = 3.286922668326831e-09\n\nIteration 70: Best Value = 3.286922668326831e-09\n\nIteration 71: Best Value = 3.286922668326831e-09\n\nIteration 72: Best Value = 3.286922668326831e-09\n\nIteration 73: Best Value = 3.286922668326831e-09\n\nIteration 74: Best Value = 3.286922668326831e-09\n\nIteration 75: Best Value = 3.286922668326831e-09\n\nIteration 76: Best Value = 3.286922668326831e-09\n\nIteration 77: Best Value = 3.286922668326831e-09\n\nIteration 78: Best Value = 3.286922668326831e-09\n\nIteration 79: Best Value = 3.286922668326831e-09\n\nIteration 80: Best Value = 3.286922668326831e-09\n\nIteration 81: Best Value = 3.286922668326831e-09\n\nIteration 82: Best Value = 3.286922668326831e-09\n\nIteration 83: Best Value = 3.286922668326831e-09\n\nIteration 84: Best Value = 3.286922668326831e-09\n\nIteration 85: Best Value = 3.286922668326831e-09\n\nIteration 86: Best Value = 3.286922668326831e-09\n\nIteration 87: Best Value = 3.286922668326831e-09\n\nIteration 88: Best Value = 3.286922668326831e-09\n\nIteration 89: Best Value = 3.286922668326831e-09\n\nIteration 90: Best Value = 3.286922668326831e-09\n\nIteration 91: Best Value = 3.286922668326831e-09\n\nIteration 92: Best Value = 3.286922668326831e-09\n\nIteration 93: Best Value = 3.286922668326831e-09\n\nIteration 94: Best Value = 3.286922668326831e-09\n\nIteration 95: Best Value = 3.286922668326831e-09\n\nIteration 96: Best Value = 3.286922668326831e-09\n\nIteration 97: Best Value = 3.286922668326831e-09\n\nIteration 98: Best Value = 3.286922668326831e-09\n\nIteration 99: Best Value = 3.286922668326831e-09\n\nOptimization completed. Best Value = 3.286922668326831e-09\n\n\n",
            "stderr": "....\n\n----------------------------------------------------------------------\n\nRan 4 tests in 0.037s\n\n\n\nOK\n\n\n",
            "returncode": 0
        },
        "coverage_report": {
            "stdout": "Name                          Stmts   Miss  Cover\n\n-------------------------------------------------\n\npso\\cost_function.py              5      1    80%\n\npso\\optimization_process.py       5      2    60%\n\npso\\pso.py                       44      0   100%\n\n-------------------------------------------------\n\nTOTAL                            54      3    94%\n\n\n",
            "stderr": "",
            "returncode": 0
        }
    }
}