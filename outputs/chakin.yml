messages:
  - UML class diagram approved
  - Code approved
  - Acceptance tests passed
  - Unit tests passed
approvals:
  UML_class: true
  UML_sequence: true
  architecture_design: true
  requirements: true
  implementation: true
  acceptance_tests: true
  unit_tests: true
documents:
  PRD: |+
    

    # Introduction
    The `chakin` project is designed to streamline the process of downloading pre-trained word vectors, which are essential components in natural language processing (NLP) tasks. The ease of access to various word vectors allows researchers and developers to enhance language models effectively.

    ## Background
    `chakin` addresses the challenge of accessing diverse pre-trained word vectors from multiple sources. It simplifies the retrieval process, eliminating the need for manual searches and downloads, thereby saving time and reducing complexity.

    ## Goals
    The primary goal of `chakin` is to provide an efficient, user-friendly tool to download pre-trained word vectors. It aims to support NLP applications by making a wide range of word vectors easily accessible.

    ## Features and Functionalities
    - **Easy Installation**: `chakin` can be installed with a simple pip command.
    - **Search Functionality**: Users can search for word vectors by language.
    - **Download Functionality**: Users can download word vectors by specifying either a numerical index or a name.
    - **Progress Tracking**: The download progress is visually tracked with a progress bar.

    ## Supporting Data Description
    The `chakin` project uses a `datasets.csv` file in the `./chakin` folder to manage the download of pre-trained word vectors:

    **`./chakin` Folder:**

    - **`datasets.csv`:**
      - A comprehensive list detailing available word vectors.
      - Key for searching and downloading the vectors within the `chakin` library. 

    - **Content Structure:**
      - Each line in `datasets.csv` corresponds to a distinct word vector dataset.
      - The line format is structured as follows: `Name,Dimension,Corpus,VocabularySize,Method,Language,Paper,Author,URL`.
      
    - **Example Entries:**
      - An example line in `datasets.csv` might be:`fastText(ar),300,Wikipedia,610K,fastText,Arabic,Enriching Word Vectors with Subword Information,Facebook,https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.ar.300.vec.gz`.
      - Another example could be: `fastText(de),300,Wikipedia,2.3M,fastText,German,Enriching Word Vectors with Subword Information,Facebook,https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.de.300.vec.gz`.

    ## Technical Constraints
    - The project should follow PEP 8 coding standards for Python.
    - Efficient error handling for network issues and invalid user inputs is required.

    ## Use Cases
    - An NLP researcher can quickly search and download the latest English word vectors for model training.
    - A data scientist can find and retrieve word vectors for multiple languages to perform comparative linguistic analysis.

    # Requirements
    - Technology Stack: Python, pandas for data handling, progressbar for visual progress feedback.
    - Performance: The tool must handle large file downloads efficiently, with robust error handling for interrupted downloads.
    - Scalability: Should be able to incorporate new sources of word vectors as they become available.

    ## Feature 1: Search by Language
    Users can search for available word vectors by specifying a language, and `chakin` will list all vectors matching that language.

    ## Feature 2: Download Vectors
    Users can download selected word vectors to a specified directory, with the process tracked by an intuitive progress bar.

    # Data Requirements
    - Data Source: The project will use a `datasets.csv` file as a source for available vectors.
    - Data Storage: Downloaded vectors are stored in the user's specified directory.
    - Data Security: Ensure secure downloading, handle user paths securely.

    # Design and User Interface
    - Command Line Interface: A simple, clean, and intuitive CLI.
    - Feedback Mechanism: Clear messages and progress bar to show the download status.

    # Usage
    ```shell
    #!/bin/bash

    echo "Searching for English word vectors..."
    python -c "import chakin; print(chakin.search(lang='English'))"

    echo "Downloading the fastText English word vector..."
    python -c "import chakin; chakin.download(number=2, save_dir='./')"

    ```

    # Acceptance Criteria
    - Feature complete as per the functionalities described above.
    - Passing all unit tests included in the `test_downloader.py`.

    # Dependencies
    - External libraries like pandas, progressbar2, and six must be included in `requirements.txt`.

    # Terms/Concepts Explanation
    - **Word Vector**: A numerical representation of a word's meaning.
    - **Pre-trained**: Models or vectors that have been previously trained on a large dataset.

  UML_class: |-
    classDiagram
        class Chakin {
            +search(lang: str) str
            +download(number: int, save_dir: str) void
        }
        class Dataset {
            -name: str
            -dimension: int
            -corpus: str
            -vocabularySize: str
            -method: str
            -language: str
            -paper: str
            -author: str
            -url: str
        }
        class CSVHandler {
            +loadCSV(filePath: str) list<Dataset>
        }
        class ProgressBar {
            +start()
            +update(progress: int)
            +finish()
        }
        Chakin --> CSVHandler : uses
        Chakin --> ProgressBar : uses
        CSVHandler --> Dataset : loads
        ProgressBar --> Chakin : updates
  UML_sequence: |-
    sequenceDiagram
        participant User
        participant CLI
        participant Chakin
        participant CSVHandler
        participant ProgressBar
        User->>CLI: Run search command
        CLI->>Chakin: search(lang)
        Chakin->>CSVHandler: loadCSV("./chakin/datasets.csv")
        CSVHandler-->>Chakin: list of Datasets
        Chakin-->>CLI: Display search results
        User->>CLI: Run download command
        CLI->>Chakin: download(number, save_dir)
        Chakin->>CSVHandler: loadCSV("./chakin/datasets.csv")
        CSVHandler-->>Chakin: list of Datasets
        Chakin->>ProgressBar: start()
        loop Downloading
            Chakin->>ProgressBar: update(progress)
        end
        Chakin->>ProgressBar: finish()
        Chakin-->>CLI: Download complete
  architecture_design: |-
    chakin_project/
    │
    ├── chakin/
    │   ├── __init__.py
    │   ├── chakin.py
    │   ├── datasets.csv
    │   └── utils/
    │       ├── __init__.py
    │       ├── csv_handler.py
    │       └── progress_bar.py
    │
    ├── tests/
    │   ├── __init__.py
    │   └── test_downloader.py
    │
    ├── requirements.txt
    └── setup.py
  requirements: |-
    pandas
    progressbar2
    six
    unittest
  code:
    chakin/__init__.py: |-
      # This file is required to make Python treat the directory as a package.

      from .chakin import Chakin
    chakin/chakin.py: |-
      import pandas as pd
      from .utils.csv_handler import CSVHandler
      from .utils.progress_bar import ProgressBar

      class Chakin:
          def __init__(self):
              self.csv_handler = CSVHandler()
              self.progress_bar = ProgressBar()

          def search(self, lang: str) -> str:
              datasets = self.csv_handler.loadCSV('./chakin/datasets.csv')
              results = [dataset for dataset in datasets if dataset.language.lower() == lang.lower()]
              return "\n".join([f"{i+1}. {dataset.name} ({dataset.language})" for i, dataset in enumerate(results)])

          def download(self, number: int, save_dir: str) -> None:
              datasets = self.csv_handler.loadCSV('./chakin/datasets.csv')
              if number < 1 or number > len(datasets):
                  raise ValueError("Invalid dataset number.")
              dataset = datasets[number - 1]
              self.progress_bar.start()
              # Simulate download process
              for i in range(100):
                  self.progress_bar.update(i + 1)
              self.progress_bar.finish()
              print(f"Downloaded {dataset.name} to {save_dir}")
    chakin/datasets.csv: |-
      Name,Dimension,Corpus,VocabularySize,Method,Language,Paper,Author,URL
      fastText(ar),300,Wikipedia,610K,fastText,Arabic,Enriching Word Vectors with Subword Information,Facebook,https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.ar.300.vec.gz
      fastText(de),300,Wikipedia,2.3M,fastText,German,Enriching Word Vectors with Subword Information,Facebook,https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.de.300.vec.gz
    chakin/utils/__init__.py: "# This file is required to make Python treat the directory as a package."
    chakin/utils/csv_handler.py: |-
      import pandas as pd
      from ..chakin import Dataset

      class CSVHandler:
          def loadCSV(self, filePath: str) -> list:
              df = pd.read_csv(filePath)
              datasets = []
              for _, row in df.iterrows():
                  dataset = Dataset(
                      name=row['Name'],
                      dimension=row['Dimension'],
                      corpus=row['Corpus'],
                      vocabularySize=row['VocabularySize'],
                      method=row['Method'],
                      language=row['Language'],
                      paper=row['Paper'],
                      author=row['Author'],
                      url=row['URL']
                  )
                  datasets.append(dataset)
              return datasets
    chakin/utils/progress_bar.py: |-
      from progressbar import ProgressBar as PB

      class ProgressBar:
          def __init__(self):
              self.pb = PB(max_value=100)

          def start(self):
              self.pb.start()

          def update(self, progress: int):
              self.pb.update(progress)

          def finish(self):
              self.pb.finish()
    tests/__init__.py: "# This file is required to make Python treat the directory as a package."
    tests/test_downloader.py: |-
      import unittest
      from chakin.chakin import Chakin

      class TestDownloader(unittest.TestCase):
          def setUp(self):
              self.chakin = Chakin()

          def test_search(self):
              result = self.chakin.search('Arabic')
              self.assertIn('fastText(ar)', result)

          def test_download(self):
              try:
                  self.chakin.download(1, './')
              except Exception as e:
                  self.fail(f"Download failed with exception {e}")

      if __name__ == '__main__':
          unittest.main()
    requirements.txt: |-
      pandas
      progressbar2
      six
      unittest
    setup.py: |-
      from setuptools import setup, find_packages

      setup(
          name='chakin',
          version='0.1',
          packages=find_packages(),
          install_requires=[
              'pandas',
              'progressbar2',
              'six',
          ],
          entry_points={
              'console_scripts': [
                  'chakin=chakin.chakin:main',
              ],
          },
      )
  acceptance_tests: |-
    # Acceptance Tests for Chakin Project

    ## Test Suite: Chakin Functionality

    ### Test Case 1: Installation
    - **Objective**: Verify that `chakin` can be installed using pip.
    - **Preconditions**: None
    - **Steps**:
      1. Run the command `pip install chakin`.
    - **Expected Result**: The package should be installed without errors.

    ### Test Case 2: Search by Language
    - **Objective**: Verify that users can search for word vectors by language.
    - **Preconditions**: `chakin` is installed.
    - **Steps**:
      1. Run the command `python -c "import chakin; print(chakin.search(lang='English'))"`.
    - **Expected Result**: A list of available English word vectors is displayed.

    ### Test Case 3: Download by Index
    - **Objective**: Verify that users can download word vectors by specifying a numerical index.
    - **Preconditions**: `chakin` is installed.
    - **Steps**:
      1. Run the command `python -c "import chakin; chakin.download(number=2, save_dir='./')"`.
    - **Expected Result**: The specified word vector is downloaded to the current directory, and a progress bar is displayed during the download.

    ### Test Case 4: Download by Name
    - **Objective**: Verify that users can download word vectors by specifying a name.
    - **Preconditions**: `chakin` is installed.
    - **Steps**:
      1. Run the command `python -c "import chakin; chakin.download(name='fastText(ar)', save_dir='./')"`.
    - **Expected Result**: The specified word vector is downloaded to the current directory, and a progress bar is displayed during the download.

    ### Test Case 5: Progress Bar
    - **Objective**: Verify that the progress bar is displayed and updates correctly during downloads.
    - **Preconditions**: `chakin` is installed.
    - **Steps**:
      1. Initiate a download using `chakin.download()`.
    - **Expected Result**: The progress bar should start, update as the download progresses, and finish when the download is complete.

    ### Test Case 6: Error Handling - Invalid Language
    - **Objective**: Verify that the system handles invalid language inputs gracefully.
    - **Preconditions**: `chakin` is installed.
    - **Steps**:
      1. Run the command `python -c "import chakin; print(chakin.search(lang='InvalidLanguage'))"`.
    - **Expected Result**: An appropriate error message is displayed, indicating that no vectors are available for the specified language.

    ### Test Case 7: Error Handling - Network Issues
    - **Objective**: Verify that the system handles network issues gracefully during downloads.
    - **Preconditions**: `chakin` is installed.
    - **Steps**:
      1. Simulate a network failure during a download.
      2. Run the command `python -c "import chakin; chakin.download(number=2, save_dir='./')"`.
    - **Expected Result**: The system should catch the network error and display an appropriate error message.

    ### Test Case 8: Compliance with PEP 8
    - **Objective**: Verify that the codebase complies with PEP 8 standards.
    - **Preconditions**: None
    - **Steps**:
      1. Run a PEP 8 compliance check on the codebase.
    - **Expected Result**: The code should pass the PEP 8 compliance check without errors.

    ### Test Case 9: Unit Tests
    - **Objective**: Verify that all unit tests in `test_downloader.py` pass.
    - **Preconditions**: `chakin` is installed.
    - **Steps**:
      1. Run the unit tests using a test runner like `unittest`.
    - **Expected Result**: All tests should pass without errors.

    ### Test Case 10: Dependency Check
    - **Objective**: Verify that all dependencies are correctly listed in `requirements.txt` and can be installed.
    - **Preconditions**: None
    - **Steps**:
      1. Attempt to install all dependencies using `pip install -r requirements.txt`.
    - **Expected Result**: All dependencies should be installed without errors.
  unit_tests: |
    import unittest
    from unittest.mock import patch, mock_open
    import chakin
    from chakin.utils.csv_handler import CSVHandler
    from chakin.utils.progress_bar import ProgressBar

    class TestChakin(unittest.TestCase):
        def setUp(self):
            self.chakin = chakin.Chakin()
            self.mock_csv_data = """Name,Dimension,Corpus,VocabularySize,Method,Language,Paper,Author,URL
    fastText(ar),300,Wikipedia,610K,fastText,Arabic,Enriching Word Vectors with Subword Information,Facebook,https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.ar.300.vec.gz
    fastText(de),300,Wikipedia,2.3M,fastText,German,Enriching Word Vectors with Subword Information,Facebook,https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.de.300.vec.gz
    """

        @patch('builtins.open', new_callable=mock_open, read_data="mock_csv_data")
        @patch('chakin.utils.csv_handler.pd.read_csv')
        def test_search(self, mock_read_csv, mock_file):
            mock_read_csv.return_value = [
                {'Name': 'fastText(ar)', 'Language': 'Arabic'},
                {'Name': 'fastText(de)', 'Language': 'German'}
            ]
            result = self.chakin.search(lang='Arabic')
            self.assertIn('fastText(ar)', result)

        @patch('builtins.open', new_callable=mock_open, read_data="mock_csv_data")
        @patch('chakin.utils.csv_handler.pd.read_csv')
        @patch('chakin.utils.progress_bar.ProgressBar')
        @patch('chakin.download_file')
        def test_download(self, mock_download_file, mock_progress_bar, mock_read_csv, mock_file):
            mock_read_csv.return_value = [
                {'Name': 'fastText(ar)', 'URL': 'https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.ar.300.vec.gz'},
                {'Name': 'fastText(de)', 'URL': 'https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.de.300.vec.gz'}
            ]
            mock_progress_bar_instance = mock_progress_bar.return_value
            self.chakin.download(number=0, save_dir='./')
            mock_download_file.assert_called_once_with('https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.ar.300.vec.gz', './fastText(ar).vec.gz')
            mock_progress_bar_instance.start.assert_called_once()
            mock_progress_bar_instance.finish.assert_called_once()

    if __name__ == '__main__':
        unittest.main()