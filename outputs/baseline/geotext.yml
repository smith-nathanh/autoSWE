messages:
  - UML class diagram approved
  - Code approved
  - Acceptance tests passed
  - Unit tests passed
approvals:
  UML_class: true
  UML_sequence: true
  architecture_design: true
  requirements: true
  implementation: true
  acceptance_tests: true
  unit_tests: true
documents:
  PRD: |+
    ## Introduction
    This document outlines the product requirements for `geotext`, a Python library designed to extract city and country mentions from texts. The project aims to provide a simple yet effective solution for geo-location data extraction from various text sources, facilitating tasks in data analysis, geographic information systems, and content tagging.

    ## Goals
    The primary goal of `geotext` is to offer an efficient and easy-to-use tool for extracting geographical information from unstructured text. It aims to assist analysts, developers, and researchers in quickly identifying and utilizing location-based data within large volumes of text.

    ## Features and Functionalities
    - **City and Country Extraction**: Accurate identification and extraction of city and country names from text.
    - **Country Code Filtering**: Ability to filter extracted cities by country codes.
    - **Country Mention Counting**: Functionality to count the number of mentions of different countries in the text.
    - **No External Dependencies**: Ensure the library runs with standard Python libraries, enhancing portability and ease of installation.
    - **Data from Reputable Sources**: Utilize geographical data from trusted sources like geonames.org.
    - **Support for Multiple Languages**: Ability to parse and recognize city and country names in various languages.

    ## Supporting Data Description
    The `geotext` project, designed to extract city and country mentions from texts, utilizes a collection of data files housed in the `./geotext/data_file` directory. These data files are essential for the library's ability to identify geographical information:

    **`./geotext/data_file` Directory:**

    - **`citypatches.txt`:**
      - **Purpose:** Enhances the accuracy of city name extraction by providing modifications or patches to city names.
      - **Example Entry:** `oklahoma	US`, `changshu	CN`.

    - **`countryInfo.txt`:**
      - **Content:** Contains comprehensive information about countries, including their ISO, ISO3, ISO-Numeric, fips, Country, Capital, Area, Population, Continent, tld, CurrencyCode, CurrencyName, Phone, Postal Code Format, Postal Code Regex, Languages, geonameid, neighbours, and EquivalentFipsCode.
      - **Example Entry:** `AD	AND	020	AN	Andorra	Andorra la Vella	468	84000	EU	.ad	EUR	Euro	376	AD###	^(?:AD)*(\d{3})$	ca	3041565	ES,FR`.

    - **`nationalities.txt`:**
      - **Function:** Enumerates nationalities, aiding in the identification and association of country names from various textual references.
      - **Example Entry:** `afghan:AF`, `albanian:AL`.

    - **`cities15000.txt`:**
      - **Data:** A list of cities worldwide with a population greater than 15,000, sourced from geonames.org.
      - **Example Entry:** `2081986	Palikir - National Government Center	Palikir - National Government Center	Palakir,Palikir,Palikyras,Palirik,Pallikir,pa li ji er,pa liki r,pallikileu,parikiru,plyqyr,Παλιρίκ,Паликир,Պալիկիր,פליקיר,ปาลีกีร์,ፓሊኪር,パリキール,帕利基尔,팔리키르	6.92477	158.16109	P	PPLC	FM		02	SO			0	90	92	Pacific/Pohnpei	2011-08-01`.

    ## Usage
    ```bash
    #! /bin/bash

    # Run the demo
    python examples/demo.py 
    ```

    ## Requirements
    ### Dependencies
    - wheel library

    ## Data Requirements
    - **Data Sources**: Utilize data from http://www.geonames.org.
    - **Data Storage**: Not applicable as `geotext` processes data in-memory.
    - **Data Security and Privacy**: Ensure that the library does not store or transmit any user data.

    ## Design and User Interface
    As a backend library, `geotext` does not have a GUI. The interface will be through Python functions and methods adhering to Pythonic design principles for simplicity and readability.

    ## Acceptance Criteria
    - Each feature must pass unit tests with 95% code coverage.
    - Performance benchmarks must demonstrate that large texts can be processed within acceptable time frames.

  UML_class: |-
    classDiagram
        class Geotext {
            +extract_cities(text: str) List[str]
            +extract_countries(text: str) List[str]
            +filter_cities_by_country(cities: List[str], country_code: str) List[str]
            +count_country_mentions(text: str) Dict[str, int]
        }
        class DataLoader {
            +load_city_patches() Dict[str, str]
            +load_country_info() Dict[str, CountryInfo]
            +load_nationalities() Dict[str, str]
            +load_cities() List[City]
        }
        class CountryInfo {
            -iso: str
            -iso3: str
            -iso_numeric: str
            -fips: str
            -country: str
            -capital: str
            -area: int
            -population: int
            -continent: str
            -tld: str
            -currency_code: str
            -currency_name: str
            -phone: str
            -postal_code_format: str
            -postal_code_regex: str
            -languages: List[str]
            -geonameid: int
            -neighbours: List[str]
            -equivalent_fips_code: str
        }
        class City {
            -geonameid: int
            -name: str
            -latitude: float
            -longitude: float
            -country_code: str
            -population: int
        }
        Geotext --> DataLoader
        DataLoader --> CountryInfo
        DataLoader --> City
  UML_sequence: |-
    sequenceDiagram
        participant User
        participant Geotext
        participant DataLoader
        User->>Geotext: extract_cities(text)
        Geotext->>DataLoader: load_cities()
        DataLoader-->>Geotext: List[City]
        Geotext-->>User: List[str] (city names)
        User->>Geotext: extract_countries(text)
        Geotext->>DataLoader: load_country_info()
        DataLoader-->>Geotext: Dict[str, CountryInfo]
        Geotext-->>User: List[str] (country names)
        User->>Geotext: filter_cities_by_country(cities, country_code)
        Geotext-->>User: List[str] (filtered city names)
        User->>Geotext: count_country_mentions(text)
        Geotext->>DataLoader: load_country_info()
        DataLoader-->>Geotext: Dict[str, CountryInfo]
        Geotext-->>User: Dict[str, int] (country mention counts)
  architecture_design: |-
    geotext/
        ├── __init__.py
        ├── geotext.py
        ├── data_loader.py
        ├── data_file/
        │   ├── citypatches.txt
        │   ├── countryInfo.txt
        │   ├── nationalities.txt
        │   └── cities15000.txt
        ├── examples/
        │   └── demo.py
        ├── tests/
        │   ├── test_geotext.py
        │   └── test_data_loader.py
        └── requirements.txt
  requirements: |-
    unittest
    wheel
  code:
    geotext/__init__.py: |-
      # geotext/__init__.py

      from .geotext import Geotext
      from .data_loader import DataLoader

      __all__ = ['Geotext', 'DataLoader']
    geotext/geotext.py: |-
      # geotext/geotext.py

      from typing import List, Dict
      from .data_loader import DataLoader

      class Geotext:
          def __init__(self):
              self.data_loader = DataLoader()

          def extract_cities(self, text: str) -> List[str]:
              cities = self.data_loader.load_cities()
              city_names = [city.name for city in cities if city.name in text]
              return city_names

          def extract_countries(self, text: str) -> List[str]:
              country_info = self.data_loader.load_country_info()
              country_names = [info.country for code, info in country_info.items() if info.country in text]
              return country_names

          def filter_cities_by_country(self, cities: List[str], country_code: str) -> List[str]:
              city_patches = self.data_loader.load_city_patches()
              filtered_cities = [city for city in cities if city_patches.get(city) == country_code]
              return filtered_cities

          def count_country_mentions(self, text: str) -> Dict[str, int]:
              country_info = self.data_loader.load_country_info()
              country_mentions = {}
              for code, info in country_info.items():
                  count = text.count(info.country)
                  if count > 0:
                      country_mentions[info.country] = count
              return country_mentions
    geotext/data_loader.py: |-
      # geotext/data_loader.py

      from typing import Dict, List
      from .country_info import CountryInfo
      from .city import City

      class DataLoader:
          def load_city_patches(self) -> Dict[str, str]:
              city_patches = {}
              with open('./geotext/data_file/citypatches.txt', 'r') as file:
                  for line in file:
                      city, country_code = line.strip().split('\t')
                      city_patches[city] = country_code
              return city_patches

          def load_country_info(self) -> Dict[str, CountryInfo]:
              country_info = {}
              with open('./geotext/data_file/countryInfo.txt', 'r') as file:
                  for line in file:
                      data = line.strip().split('\t')
                      country_info[data[0]] = CountryInfo(*data)
              return country_info

          def load_nationalities(self) -> Dict[str, str]:
              nationalities = {}
              with open('./geotext/data_file/nationalities.txt', 'r') as file:
                  for line in file:
                      nationality, country_code = line.strip().split(':')
                      nationalities[nationality] = country_code
              return nationalities

          def load_cities(self) -> List[City]:
              cities = []
              with open('./geotext/data_file/cities15000.txt', 'r') as file:
                  for line in file:
                      data = line.strip().split('\t')
                      cities.append(City(*data))
              return cities
    geotext/data_file/citypatches.txt: |-
      # geotext/data_file/citypatches.txt

      # Example entries
      oklahoma	US
      changshu	CN
    geotext/data_file/countryInfo.txt: |-
      # geotext/data_file/countryInfo.txt

      # Example entries
      AD	AND	020	AN	Andorra	Andorra la Vella	468	84000	EU	.ad	EUR	Euro	376	AD###	^(?:AD)*(\d{3})$	ca	3041565	ES,FR
    geotext/data_file/nationalities.txt: |-
      # geotext/data_file/nationalities.txt

      # Example entries
      afghan:AF
      albanian:AL
    geotext/data_file/cities15000.txt: |-
      # geotext/data_file/cities15000.txt

      # Example entries
      2081986	Palikir - National Government Center	Palikir - National Government Center	Palakir,Palikir,Palikyras,Palirik,Pallikir,pa li ji er,pa liki r,pallikileu,parikiru,plyqyr,Παλιρίκ,Паликир,Պալիկիր,פליקיר,ปาลีกีร์,ፓሊኪር,パリキール,帕利基尔,팔리키르	6.92477	158.16109	P	PPLC	FM		02	SO			0	90	92	Pacific/Pohnpei	2011-08-01
    geotext/examples/demo.py: |-
      # geotext/examples/demo.py

      from geotext import Geotext

      def main():
          text = "I visited Paris and Berlin last summer."
          geotext = Geotext()
          cities = geotext.extract_cities(text)
          countries = geotext.extract_countries(text)
          print("Cities:", cities)
          print("Countries:", countries)

      if __name__ == "__main__":
          main()
    geotext/tests/test_geotext.py: |-
      # geotext/tests/test_geotext.py

      import unittest
      from geotext import Geotext

      class TestGeotext(unittest.TestCase):
          def setUp(self):
              self.geotext = Geotext()

          def test_extract_cities(self):
              text = "I visited Paris and Berlin last summer."
              cities = self.geotext.extract_cities(text)
              self.assertIn("Paris", cities)
              self.assertIn("Berlin", cities)

          def test_extract_countries(self):
              text = "I visited France and Germany last summer."
              countries = self.geotext.extract_countries(text)
              self.assertIn("France", countries)
              self.assertIn("Germany", countries)

          def test_filter_cities_by_country(self):
              cities = ["Paris", "Berlin", "Madrid"]
              filtered_cities = self.geotext.filter_cities_by_country(cities, "FR")
              self.assertIn("Paris", filtered_cities)
              self.assertNotIn("Berlin", filtered_cities)

          def test_count_country_mentions(self):
              text = "France is beautiful. France has great food."
              country_mentions = self.geotext.count_country_mentions(text)
              self.assertEqual(country_mentions.get("France"), 2)

      if __name__ == '__main__':
          unittest.main()
    geotext/tests/test_data_loader.py: |-
      # geotext/tests/test_data_loader.py

      import unittest
      from geotext import DataLoader

      class TestDataLoader(unittest.TestCase):
          def setUp(self):
              self.data_loader = DataLoader()

          def test_load_city_patches(self):
              city_patches = self.data_loader.load_city_patches()
              self.assertIn("oklahoma", city_patches)
              self.assertEqual(city_patches["oklahoma"], "US")

          def test_load_country_info(self):
              country_info = self.data_loader.load_country_info()
              self.assertIn("AD", country_info)
              self.assertEqual(country_info["AD"].country, "Andorra")

          def test_load_nationalities(self):
              nationalities = self.data_loader.load_nationalities()
              self.assertIn("afghan", nationalities)
              self.assertEqual(nationalities["afghan"], "AF")

          def test_load_cities(self):
              cities = self.data_loader.load_cities()
              city_names = [city.name for city in cities]
              self.assertIn("Palikir - National Government Center", city_names)

      if __name__ == '__main__':
          unittest.main()
    geotext/requirements.txt: |-
      # geotext/requirements.txt

      unittest
      wheel
  acceptance_tests: |
    import unittest
    from geotext import Geotext

    class TestGeotextAcceptance(unittest.TestCase):
        def setUp(self):
            self.geotext = Geotext()
            self.sample_text = "Paris is a beautiful city. I have been to Paris and London."
            self.sample_text_with_countries = "I have visited France, Germany, and the USA."

        def test_extract_cities(self):
            # Test city extraction
            cities = self.geotext.extract_cities(self.sample_text)
            self.assertIn('Paris', cities)
            self.assertIn('London', cities)

        def test_extract_countries(self):
            # Test country extraction
            countries = self.geotext.extract_countries(self.sample_text_with_countries)
            self.assertIn('France', countries)
            self.assertIn('Germany', countries)
            self.assertIn('USA', countries)

        def test_filter_cities_by_country(self):
            # Test filtering cities by country code
            cities = ['Paris', 'London', 'Berlin']
            filtered_cities = self.geotext.filter_cities_by_country(cities, 'FR')
            self.assertIn('Paris', filtered_cities)
            self.assertNotIn('London', filtered_cities)
            self.assertNotIn('Berlin', filtered_cities)

        def test_count_country_mentions(self):
            # Test counting country mentions
            country_mentions = self.geotext.count_country_mentions(self.sample_text_with_countries)
            self.assertEqual(country_mentions['France'], 1)
            self.assertEqual(country_mentions['Germany'], 1)
            self.assertEqual(country_mentions['USA'], 1)

        def test_no_external_dependencies(self):
            # Ensure no external dependencies are used
            try:
                import geotext
            except ImportError:
                self.fail("geotext module should not have external dependencies")

        def test_data_from_reputable_sources(self):
            # Check if data is loaded from reputable sources
            data_loader = self.geotext.data_loader
            city_patches = data_loader.load_city_patches()
            self.assertIsInstance(city_patches, dict)
            country_info = data_loader.load_country_info()
            self.assertIsInstance(country_info, dict)

        def test_support_for_multiple_languages(self):
            # Test support for multiple languages
            multilingual_text = "Paris est une belle ville. Ich war in Berlin."
            cities = self.geotext.extract_cities(multilingual_text)
            self.assertIn('Paris', cities)
            self.assertIn('Berlin', cities)

    if __name__ == '__main__':
        unittest.main()
  unit_tests: |
    import unittest
    from geotext import Geotext
    from data_loader import DataLoader, CountryInfo, City

    class TestGeotext(unittest.TestCase):
        def setUp(self):
            self.geotext = Geotext()
            self.data_loader = DataLoader()

        def test_extract_cities(self):
            text = "I visited New York and Los Angeles last summer."
            expected_cities = ["New York", "Los Angeles"]
            self.assertEqual(self.geotext.extract_cities(text), expected_cities)

        def test_extract_countries(self):
            text = "I have been to the USA and Canada."
            expected_countries = ["USA", "Canada"]
            self.assertEqual(self.geotext.extract_countries(text), expected_countries)

        def test_filter_cities_by_country(self):
            cities = ["New York", "Los Angeles", "Toronto"]
            country_code = "US"
            expected_filtered_cities = ["New York", "Los Angeles"]
            self.assertEqual(self.geotext.filter_cities_by_country(cities, country_code), expected_filtered_cities)

        def test_count_country_mentions(self):
            text = "USA is a country. USA has many states. Canada is north of USA."
            expected_country_mentions = {"USA": 3, "Canada": 1}
            self.assertEqual(self.geotext.count_country_mentions(text), expected_country_mentions)

    class TestDataLoader(unittest.TestCase):
        def setUp(self):
            self.data_loader = DataLoader()

        def test_load_city_patches(self):
            city_patches = self.data_loader.load_city_patches()
            self.assertIsInstance(city_patches, dict)
            self.assertIn("oklahoma", city_patches)

        def test_load_country_info(self):
            country_info = self.data_loader.load_country_info()
            self.assertIsInstance(country_info, dict)
            self.assertIn("AD", country_info)
            self.assertIsInstance(country_info["AD"], CountryInfo)

        def test_load_nationalities(self):
            nationalities = self.data_loader.load_nationalities()
            self.assertIsInstance(nationalities, dict)
            self.assertIn("afghan", nationalities)

        def test_load_cities(self):
            cities = self.data_loader.load_cities()
            self.assertIsInstance(cities, list)
            self.assertTrue(all(isinstance(city, City) for city in cities))

    if __name__ == '__main__':
        unittest.main()